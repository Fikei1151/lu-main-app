services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # แก้ไขตรงนี้: Mount ไฟล์ default.conf โดยตรง
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt  # สำหรับ cert ของ lu-maid.com
      # Path บน Host ที่เก็บ cert ของ nia-stg.lu-maid.com
      # Nginx จะเข้าถึง cert นี้ผ่าน /etc/nginx/ssl/cert.pem และ key.pem ภายใน container
      # - /home/project/nia_sale_back/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - shared-net
    restart: unless-stopped # เพิ่ม restart policy

  web: # lu-main-app (Flask)
    build: .
    container_name: lu-main-app
    expose:
      - "800"
    env_file:
      - .env
    volumes:
      - ./:/app  # พิจารณาใช้ named volume สำหรับ code ใน production เพื่อ performance ที่ดีกว่า
      - ./instance:/app/instance
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-lumaid_secret_key}
    networks:
      - shared-net
    restart: unless-stopped # เพิ่ม restart policy

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      # certbot ไม่จำเป็นต้องเข้าถึง /etc/nginx/conf.d หรือ /etc/nginx/ssl โดยตรง
      # การ reload nginx จะทำผ่าน command เช่น docker exec nginx nginx -s reload
    networks:
      - shared-net
    # Certbot มักจะรันเป็น command ไม่ใช่ service ที่รันตลอดเวลา
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'" # ตัวอย่างสำหรับการ renew อัตโนมัติ

networks:
  shared-net:
    external: true